// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model Size {
//   id     String @id @default(uuid())
//   width  Int
//   height Int

//   ElementSize ElementSize?
//   CropSize    CropSize?
//   // TextElement TextElement?
// }

// model ElementSize {
//   id          String       @id @default(uuid())
//   size        Size         @relation(fields: [sizeId], references: [id])
//   sizeId      String       @unique
//   imageSize   ImageElement @relation(fields: [imageSizeId], references: [id])
//   imageSizeId String       @unique
// }

// model CropSize {
//   id              String       @id @default(uuid())
//   size            Size         @relation(fields: [sizeId], references: [id])
//   sizeId          String       @unique
//   imageCropSize   ImageElement @relation(fields: [imageCropSizeId], references: [id])
//   imageCropSizeId String       @unique
// }

// model Position {
//   id String @id @default(uuid())
//   x  Int
//   y  Int

//   ElementPosition ElementPosition?
//   CropPosition    CropPosition?
// }

// model ElementPosition {
//   id String @id @default(uuid())

//   position   Position @relation(fields: [positionId], references: [id])
//   positionId String   @unique

//   imageElementPosition   ImageElement @relation(fields: [imageElementPositionId], references: [id])
//   imageElementPositionId String       @unique
// }

// model CropPosition {
//   id         String   @id @default(uuid())
//   position   Position @relation(fields: [positionId], references: [id])
//   positionId String   @unique

//   imageElementCropPosition   ImageElement @relation(fields: [imageElementCropPositionId], references: [id])
//   imageElementCropPositionId String       @unique
// }

// model Color {
//   id                        String                     @id @default(uuid())
//   r                         Int
//   g                         Int
//   b                         Int
//   a                         Int
//   // textOutline               TextOutline?
//   // textElement               TextElement?
//   backgroundTemplateElement BackgroundTemplateElement?
// }

// // model TextOutline {
// //   id          String       @id @default(auto()) @map("_id")
// //   width       Int
// //   color       Color        @relation(fields: [colorId], references: [id])
// //   colorId     String
// //   textElement TextElement?
// // }

// // model TextElement {
// // id           String                    @id @default(uuid())
// //   size              Size             @relation(fields: [sizeId], references: [id])
// //   sizeId            String           @unique
// //   position          Position         @relation(fields: [positionId], references: [id])
// //   positionId        String           @unique
// //   rotation          Int
// //   opacity           Int
// //   fontFamily        String
// //   fontWeight        Int
// //   fontStyle         String
// //   fontSize          Int
// //   lineHeight        Int
// //   letterSpacing     Int
// //   textAlign         String
// //   outline           TextOutline      @relation(fields: [outlineId], references: [id])
// //   outlineId         String           @unique
// //   color             Color            @relation(fields: [colorId], references: [id])
// //   colorId           String
// //   textTransform     String
// //   link              String[]
// //   content           String
// //   type              String
// //   templateElement   TemplateElement? @relation(fields: [templateElementId], references: [id])
// //   templateElementId String           @unique
// // }

// model ImageElement {
//   id              String  @id @default(uuid())
//   // size              ElementSize      @relation(fields: [sizeId], references: [id])
//   // sizeId            String           @unique
//   // position        ElementPosition @relation(fields: [positionId], references: [id])
//   // positionId      String          @unique
//   rotation        Int
//   keepProportions Boolean
//   opacity         Int
//   url             String?
//   // cropSize        CropSize        @relation(fields: [cropSizeId], references: [id])
//   // cropSizeId      String          @unique
//   // cropPosition      Position         @relation(fields: [cropPositionId], references: [id])
//   // cropPositionId    String           @unique
//   type            String

//   TemplateElement   TemplateElement @relation(fields: [templateElementId], references: [id])
//   templateElementId String          @unique

//   CropPosition    CropPosition?
//   ElementSize     ElementSize?
//   CropSize        CropSize?
//   ElementPosition ElementPosition?
// }

// model PageConfig {
//   id                        String                     @id @default(uuid())
//   width                     Int
//   height                    Int
//   unit                      String
//   dpi                       Int
//   backgroundTemplateElement BackgroundTemplateElement?
// }

// model BackgroundTemplateElement {
//   id              String     @id @default(uuid())
//   backgroundColor Color      @relation(fields: [bgColorId], references: [id])
//   bgColorId       String     @unique
//   pageConfig      PageConfig @relation(fields: [pageConfigId], references: [id])
//   pageConfigId    String     @unique
//   template        Template?
// }

// model TemplateElement {
//   id String @id @default(uuid())

//   type       String
//   // textElement    TextElement?  @relation(fields: [textElementId], references: [id])
//   // textElementId  String?       @unique
//   Template   Template? @relation(fields: [templateId], references: [id])
//   templateId String?   @unique

//   ImageElement ImageElement?
// }

// model Template {
//   id           String                    @id @default(uuid())
//   background   BackgroundTemplateElement @relation(fields: [backgroundId], references: [id])
//   backgroundId String                    @unique
//   elements     TemplateElement[]
// }

model Size {
  id     String @id @default(uuid())
  width  Int
  height Int
}

// model Element{
//     id String @id @default(uuid())
//    size Size
//   // position: Position;
//   // rotation: number;
//   // keepProportions: boolean;
//   // opacity: number;
//   // type: "image";
//   // url?: string;
//   // crop: { size: Size; position: Position };
// }

model Element {
  id String @id @default(uuid())

  Template   Template? @relation(fields: [templateId], references: [id])
  templateId String?   @unique
}

model PageConfig {
  id     String @id @default(uuid())
  width  Int
  height Int
  unit   String
  dpi    Int

  backgroundPageInfo   BackgroundTemplateElement @relation(fields: [backgroundPageInfoId], references: [id])
  backgroundPageInfoId String                    @unique
}

model Color {
  id String @id @default(uuid())
  r  Int
  g  Int
  b  Int
  a  Int

  backgroundColor BackgroundTemplateElement? @relation(fields: [bgColorId], references: [id])
  bgColorId       String?                    @unique
}

model BackgroundTemplateElement {
  id String @id @default(uuid())

  template   Template @relation(fields: [templateId], references: [id])
  templateId String   @unique

  Color      Color?
  PageConfig PageConfig?
}

model Template {
  id String @id @default(uuid())

  templateGroup   TemplateGroup? @relation(fields: [templateGroupId], references: [id])
  templateGroupId String?        @unique

  BackgroundTemplateElement BackgroundTemplateElement?
  elements                  Element[]
}

model TemplateGroup {
  id String @id @default(uuid())

  Templates Template[]
}
